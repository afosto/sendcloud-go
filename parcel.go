package sendcloud

import (
	"encoding/json"
	"time"
)

type LabelData []byte

type CustomsShipmentType int

const (
	CustomsShipmentTypeGift CustomsShipmentType = iota
	CustomsShipmentTypeDocuments
	CustomsShipmentTypeCommercialGoods
	CustomsShipmentTypeCommercialSample
	CustomsShipmentTypeReturnedGoods
)

type ParcelParams struct {
	Name             string
	CompanyName      string
	Street           string
	HouseNumber      string
	City             string
	PostalCode       string
	State            string
	CountryCode      string
	AdditionalInfo   string
	IsLabelRequested bool
	Method           int64
	EmailAddress     string
	PhoneNumber      string
	ExternalID       string
	ToServicePointID int64
	Weight           string
	OrderNumber      string
	SenderID         int64
	Items            []CreateParcelItemRequest
	// The currency of the total order value. Validated against a format of
	// “XYZ” (ISO 4217).
	TotalOrderValueCurrency *string
	// The value paid by the buyer (via various payment methods supported by the
	// shop(cash on delivery, pre-paid or post-paid), it will also be used for
	// the cash on delivery amount for example “99.99”.
	TotalOrderValue *string
	// Shipping method name selected by buyer during the checkout
	ShippingMethodCheckoutName *string
	// Customs invoice number
	CustomsInvoiceNr *string
	// Customs shipment type
	CustomsShipmentType *CustomsShipmentType
	// When set to true configured shipping rules will be applied before creating the label and announcing the Parcel
	ApplyShippingRules *bool
}

type CreateParcelItemRequest struct {
	// Harmonized System Code Wikipedia Link. Providing a complete HS code with 8 characters increases the delivery rate.
	HsCode string `json:"hs_code"`
	// Weight of a single item in kilograms.
	Weight string `json:"weight"`
	// Quantity of items shipped.
	Quantity int `json:"quantity"`
	// Description of the item.
	Description string `json:"description"`
	// ISO-2 code of the country where the items were originally produced. External Link.
	OriginCountry string `json:"origin_country,omitempty"`
	// Value of a single item.
	Value float64 `json:"value"`
	// The SKU of the product.
	SKU string `json:"sku,omitempty"`
	// External ID of the item generated by a shop system or similar.
	ItemId string `json:"item_id,omitempty"`
	// The list of properties of the product. Used as a JSON object with {‘key’: ‘value’}.
	Properties map[string]interface{} `json:"properties,omitempty"`
}

type CreateParcelShipmentRequest struct {
	ID int64 `json:"id"`
}

type Parcel struct {
	ID             int64       `json:"id"`
	ExternalID     *string     `json:"external_id"`
	Name           string      `json:"name"`
	CompanyName    string      `json:"company_name"`
	Email          string      `json:"email"`
	Street         string      `json:"street"`
	HouseNumber    string      `json:"house_number"`
	Address        string      `json:"address"`
	Address2       string      `json:"address_2"`
	City           string      `json:"city"`
	PostalCode     string      `json:"postal_code"`
	CountryCode    string      `json:"country_code"`
	Method         int64       `json:"method"`
	PhoneNumber    *string     `json:"phone_number"`
	TrackingNumber string      `json:"tracking_number"`
	TrackingUrl    string      `json:"tracking_url"`
	ServicePointID *int64      `json:"to_service_point"`
	Weight         string      `json:"weight"`
	Label          string      `json:"label"`
	OrderNumber    string      `json:"order_number"`
	IsReturn       bool        `json:"is_return"`
	Note           *string     `json:"note"`
	CarrierCode    string      `json:"carrier"`
	Data           interface{} `json:"data"`
	CreatedAt      time.Time   `json:"created_at"`
}

type ParcelRequestContainer struct {
	Parcel ParcelRequest `json:"parcel"`
}

type ParcelRequest struct {
	Name                       string                       `json:"name"`
	CompanyName                string                       `json:"company_name"`
	Address                    string                       `json:"address"`
	Address2                   string                       `json:"address_2"`
	HouseNumber                string                       `json:"house_number"`
	City                       string                       `json:"city"`
	PostalCode                 string                       `json:"postal_code"`
	CountryState               string                       `json:"country_state"`
	Country                    string                       `json:"country"`
	Weight                     string                       `json:"weight,omitempty"`
	Telephone                  string                       `json:"telephone"`
	Email                      string                       `json:"email"`
	RequestLabel               bool                         `json:"request_label"`
	ToServicePointID           *int64                       `json:"to_service_point,omitempty"`
	OrderNumber                string                       `json:"order_number"`
	ExternalID                 *string                      `json:"external_reference,omitempty"`
	SenderID                   *int64                       `json:"sender_address,omitempty"`
	Shipment                   *CreateParcelShipmentRequest `json:"shipment,omitempty"`
	Items                      []CreateParcelItemRequest    `json:"parcel_items,omitempty"`
	TotalOrderValueCurrency    *string                      `json:"total_order_value_currency,omitempty"`
	TotalOrderValue            *string                      `json:"total_order_value,omitempty"`
	ShippingMethodCheckoutName *string                      `json:"shipping_method_checkout_name,omitempty"`
	CustomsInvoiceNr           *string                      `json:"customs_invoice_nr,omitempty"`
	CustomsShipmentType        *CustomsShipmentType         `json:"customs_shipment_type,omitempty"`
	ApplyShippingRules         *bool                        `json:"apply_shipping_rules,omitempty"`
}

type LabelResponseContainer struct {
	Label LabelResponse `json:"label"`
}

type ParcelResponseContainer struct {
	Parcel ParcelResponse `json:"parcel"`
}

type ParcelListResponseContainer struct {
	Parcels []*ParcelResponse `json:"parcel"`
}

type LabelResponse struct {
	NormalPrinter []string `json:"normal_printer"`
	LabelPrinter  string   `json:"label_printer"`
}

type ParcelResponse struct {
	ID                  int64           `json:"id"`
	Address             string          `json:"address"`
	Address2            string          `json:"address_2"`
	AddressDivided      AddressDivided  `json:"address_divided"`
	City                string          `json:"city"`
	CompanyName         string          `json:"company_name"`
	Country             CountryResponse `json:"country"`
	Data                interface{}     `json:"data"`
	DateCreated         string          `json:"date_created"`
	Email               string          `json:"email"`
	Name                string          `json:"name"`
	PostalCode          string          `json:"postal_code"`
	Reference           string          `json:"reference"`
	Shipment            Shipment        `json:"shipment"`
	Status              Status          `json:"status"`
	ToServicePointID    *int64          `json:"to_service_point"`
	Telephone           *string         `json:"telephone"`
	TrackingNumber      string          `json:"tracking_number"`
	TrackingUrl         string          `json:"tracking_url"`
	Weight              string          `json:"weight"`
	Label               LabelResponse   `json:"label"`
	OrderNumber         string          `json:"order_number"`
	InsuredValue        int64           `json:"insured_value"`
	TotalInsuredValue   int64           `json:"total_insured_value"`
	ToState             interface{}     `json:"to_state"`
	CustomsInvoiceNr    string          `json:"customs_invoice_nr"`
	CustomsShipmentType interface{}     `json:"customs_shipment_type"`
	Type                interface{}     `json:"type"`
	ShipmentUUID        *string         `json:"shipment_uuid"`
	ShippingMethod      int64           `json:"shipping_method"`
	ExternalOrderID     *string         `json:"external_order_id"`
	ExternalShipmentID  *string         `json:"external_shipment_id"`
	ExternalReference   *string         `json:"external_reference"`
	IsReturn            bool            `json:"is_return"`
	Note                *string         `json:"note"`
	Carrier             Carrier         `json:"carrier"`
}

type Carrier struct {
	Code string `json:"code"`
}

type AddressDivided struct {
	Street      string `json:"street"`
	HouseNumber string `json:"house_number"`
}

type Shipment struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

type Status struct {
	ID      int    `json:"id"`
	Message string `json:"message"`
}

// Translate the params into an actual request body
func (p *ParcelParams) GetPayload() interface{} {
	parcel := ParcelRequest{
		Name:                       p.Name,
		CompanyName:                p.CompanyName,
		Address:                    p.Street,
		Address2:                   p.AdditionalInfo,
		HouseNumber:                p.HouseNumber,
		City:                       p.City,
		PostalCode:                 p.PostalCode,
		CountryState:               p.State,
		Country:                    p.CountryCode,
		Telephone:                  p.PhoneNumber,
		Email:                      p.EmailAddress,
		RequestLabel:               p.IsLabelRequested,
		Items:                      p.Items,
		TotalOrderValueCurrency:    p.TotalOrderValueCurrency,
		TotalOrderValue:            p.TotalOrderValue,
		ShippingMethodCheckoutName: p.ShippingMethodCheckoutName,
		CustomsInvoiceNr:           p.CustomsInvoiceNr,
		CustomsShipmentType:        p.CustomsShipmentType,
		ApplyShippingRules:         p.ApplyShippingRules,
	}
	if p.Method != 0 {
		parcel.Shipment = &CreateParcelShipmentRequest{ID: p.Method}
	}

	if p.SenderID != 0 {
		parcel.SenderID = &p.SenderID
	}
	if p.ExternalID != "" {
		parcel.ExternalID = &p.ExternalID
	}
	if p.OrderNumber != "" {
		parcel.OrderNumber = p.OrderNumber
	}
	if p.ToServicePointID != 0 {
		parcel.ToServicePointID = &p.ToServicePointID
	}
	if p.Weight != "" {
		parcel.Weight = p.Weight
	}

	ar := ParcelRequestContainer{Parcel: parcel}
	return ar
}

// Handle the response and return it as a Parcel{}
func (p *ParcelResponseContainer) GetResponse() interface{} {
	parcel := Parcel{
		ID:             p.Parcel.ID,
		ExternalID:     p.Parcel.ExternalReference,
		Name:           p.Parcel.Name,
		CompanyName:    p.Parcel.CompanyName,
		Email:          p.Parcel.Email,
		Street:         p.Parcel.AddressDivided.Street,
		HouseNumber:    p.Parcel.AddressDivided.HouseNumber,
		Address:        p.Parcel.Address,
		Address2:       p.Parcel.Address2,
		City:           p.Parcel.City,
		Method:         p.Parcel.Shipment.ID,
		PostalCode:     p.Parcel.PostalCode,
		CountryCode:    p.Parcel.Country.Iso2,
		PhoneNumber:    p.Parcel.Telephone,
		TrackingNumber: p.Parcel.TrackingNumber,
		TrackingUrl:    p.Parcel.TrackingUrl,
		ServicePointID: p.Parcel.ToServicePointID,
		Label:          p.Parcel.Label.LabelPrinter,
		OrderNumber:    p.Parcel.OrderNumber,
		IsReturn:       p.Parcel.IsReturn,
		Note:           p.Parcel.Note,
		CarrierCode:    p.Parcel.Carrier.Code,
		Data:           p.Parcel.Data,
		Weight:         p.Parcel.Weight,
	}

	layout := "02-01-2006 15:04:05"
	createdAt, _ := time.Parse(layout, p.Parcel.DateCreated)
	parcel.CreatedAt = createdAt

	return &parcel
}

// Set the response
func (p *ParcelResponseContainer) SetResponse(body []byte) error {
	err := json.Unmarshal(body, &p)
	if err != nil {
		return err
	}
	return nil
}

// Get formatted response
func (l LabelData) GetResponse() interface{} {
	return l
}

// Set the response
func (l *LabelData) SetResponse(body []byte) error {
	*l = body
	return nil
}

// DocumentFormat is any of the formats a Document can be in.
type DocumentFormat string

func (df DocumentFormat) String() string { return string(df) }

func (df DocumentFormat) Name() string {
	switch df {
	case DocumentPdf:
		return "pdf"
	case DocumentZpl:
		return "zpl"
	case DocumentPng:
		return "png"
	default:
		return "unknown"
	}
}

const (
	DocumentPdf DocumentFormat = "application/pdf"
	DocumentZpl DocumentFormat = "application/zpl"
	DocumentPng DocumentFormat = "image/png"
)

// Document represents a document file that can be downloaded from the api.
type Document struct {
	Format DocumentFormat
	Body   []byte
}
